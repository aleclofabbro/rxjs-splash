// Generated by CoffeeScript 1.4.0
(function() {
  var ObservableArray, vm,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ObservableArray = (function(_super) {

    __extends(ObservableArray, _super);

    function ObservableArray(items) {
      var item, _i, _len;
      if (items == null) {
        items = [];
      }
      ObservableArray.__super__.constructor.apply(this, arguments);
      this.values = [];
      this.lifetimes = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        this.push(item);
      }
    }

    ObservableArray.prototype.push = function(value) {
      var lifetime;
      this.values.push(value);
      this.lifetimes.push(lifetime = new Rx.BehaviorSubject(value));
      this.onNext(lifetime);
      return value;
    };

    ObservableArray.prototype.remove = function(value) {
      var index;
      index = this.values.indexOf(value);
      if (index === -1) {
        console.log(index);
      }
      return this.splice(index, 1);
    };

    ObservableArray.prototype.splice = function() {
      var lifetime, removed, _i, _len, _results;
      Array.prototype.splice.apply(this.values, arguments);
      removed = Array.prototype.splice.apply(this.lifetimes, arguments);
      _results = [];
      for (_i = 0, _len = removed.length; _i < _len; _i++) {
        lifetime = removed[_i];
        _results.push(lifetime.onCompleted());
      }
      return _results;
    };

    ObservableArray.prototype.subscribe = function(observerOrOnNext) {
      var lifetime, subscription, _i, _len, _ref;
      subscription = ObservableArray.__super__.subscribe.apply(this, arguments);
      this.purge();
      observerOrOnNext = arguments.length > 1 || typeof observerOrOnNext === 'function' ? observerOrOnNext : observerOrOnNext.onNext;
      _ref = this.lifetimes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lifetime = _ref[_i];
        observerOrOnNext(lifetime);
      }
      return subscription;
    };

    ObservableArray.prototype.purge = function() {
      var lifetime, _i, _len, _ref, _results;
      _ref = this.lifetimes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lifetime = _ref[_i];
        if (lifetime.isCompleted) {
          _results.push(this.remove(lifetime));
        }
      }
      return _results;
    };

    ObservableArray.prototype.dispose = function() {
      var lifetime, _i, _len, _ref, _results;
      _ref = this.lifetimes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lifetime = _ref[_i];
        _results.push(lifetime.onCompleted());
      }
      return _results;
    };

    return ObservableArray;

  })(Rx.Subject);

  vm = {
    items: new ObservableArray,
    remove: function(data) {
      return vm.items.remove(data);
    },
    select: function(data) {
      return data.isSelected.onNext(!data.isSelected.value);
    },
    add: function() {
      return vm.items.push({
        name: new Rx.BehaviorSubject('Name'),
        isSelected: new Rx.BehaviorSubject(false)
      });
    }
  };

  $(function() {
    return sx.bind(vm);
  });

}).call(this);
