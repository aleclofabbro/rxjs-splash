// Generated by CoffeeScript 1.4.0
(function() {
  var sx;

  sx = window.sx = {
    utils: {},
    internal: {},
    binders: {}
  };

  sx.utils.unwrap = function(valueOrBehavior) {
    if (valueOrBehavior.value && valueOrBehavior.subscribe) {
      return valueOrBehavior.value;
    }
    return valueOrBehavior;
  };

  sx.utils.wrap = function(valueOrBehavior) {
    if (valueOrBehavior.value && valueOrBehavior.subscribe) {
      return valueOrBehavior;
    }
    return new Rx.BehaviorSubject(valueOrBehavior);
  };

  sx.bind = function(vm, target) {
    target = $(target || window.document.body);
    return sx.internal.bind({
      vm: vm,
      vmRoot: vm,
      vmParent: void 0,
      target: target
    });
  };

  sx.internal.bind = function(context) {
    var bindings;
    return bindings = sx.internal.parseBindings(context);
  };

  sx.internal.parseBindings = function(context) {
    var binding, key, keys, value, values, _ref;
    binding = context.target.attr('data-splash');
    if (!binding) {
      return null;
    }
    keys = ['$data', '$root', '$parent'];
    values = [context.vm, context.vmRoot, context.vmParent];
    _ref = context.vm;
    for (key in _ref) {
      value = _ref[key];
      keys.push(key);
      values.push(value);
    }
    return new Function(keys, "return { " + binding + " };").apply(null, values);
  };

  sx.binders.click = function(context, options) {
    return sx.binders.event(context, options, 'click');
  };

  sx.binders.event = function(context, options, type) {
    var obs;
    if (type == null) {
      type = options.type;
    }
    obs = $(context.target).onAsObservable(type);
    if (typeof options === 'function') {
      return obs.subscribe(function(e) {
        return options({
          context: context,
          e: e
        });
      });
    }
    return obs.subscribe(function(e) {
      return options.onNext({
        context: context,
        e: e
      });
    });
  };

}).call(this);
