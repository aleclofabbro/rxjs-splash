// Generated by CoffeeScript 1.4.0

/*
Splash
*/


(function() {
  var Splash;

  Splash = (function() {

    function Splash() {
      this.binders = {};
    }

    Splash.prototype.bind = function(vm, dom) {
      var bindings, disposable, self, targets;
      disposable = new Rx.CompositeDisposable;
      self = this;
      dom = $(dom || 'body');
      targets = dom.find('[data-splash]');
      bindings = targets.map(function() {
        var target;
        target = $(this);
        return {
          target: target,
          bindings: self.parseBindings(vm, target.attr('data-splash'))
        };
      });
      bindings.each(function() {
        var key, value, _ref, _results;
        _ref = this.bindings;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(disposable.add(self.binders[key].init(this.target, {
            options: value,
            vm: vm
          })));
        }
        return _results;
      });
      return disposable;
    };

    Splash.prototype.parseBindings = function(vm, binding) {
      var key, keys, value, values;
      keys = [];
      values = [];
      for (key in vm) {
        value = vm[key];
        keys.push(key);
        values.push(value);
      }
      return new Function(keys, 'return {' + binding + '};').apply(null, values);
    };

    return Splash;

  })();

  window.sx = new Splash;

  /*
  Binders
  */


  sx.binders.text = {
    init: function(target, o) {
      return o.options.subscribe(function(x) {
        return target.text(x);
      });
    }
  };

  sx.binders.html = {
    init: function(target, o) {
      return o.options.subscribe(function(x) {
        return target.html(x);
      });
    }
  };

  sx.binders.value = {
    init: function(target, o) {
      var blur, focus, get, set, source;
      focus = target.onAsObservable('focus');
      blur = target.onAsObservable('blur');
      source = o.options;
      set = source.takeUntil(focus).concat(blur.take(1)).repeat().subscribe(function(x) {
        return target.val(x);
      });
      get = target.onAsObservable('change').subscribe(function(x) {
        return source.onNext(target.val());
      });
      return new Rx.CompositeDisposable(get, set);
    }
  };

  sx.binders.css = {
    init: function(target, o) {
      var css, disposable, source, _ref;
      disposable = new Rx.CompositeDisposable;
      _ref = o.options;
      for (css in _ref) {
        source = _ref[css];
        disposable.add(source.subscribe(function(x) {
          return target.toggleClass(css, x);
        }));
      }
      return disposable;
    }
  };

  sx.binders.click = {
    init: function(target, o) {
      return target.onAsObservable('click').subscribe(function(e) {
        e.preventDefault();
        return o.options.call(o.vm, o.vm, e);
      });
    }
  };

}).call(this);
