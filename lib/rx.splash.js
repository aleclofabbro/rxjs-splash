// Generated by CoffeeScript 1.4.0

/*
Splash
*/


(function() {
  var Splash;

  Splash = (function() {

    function Splash() {
      this.binders = {};
    }

    Splash.prototype.bind = function(vm, dom) {
      var bindings, self;
      self = this;
      dom = $(dom || 'body');
      bindings = dom.find('[data-splash]').map(function() {
        var target;
        target = $(this);
        return {
          target: target,
          bindings: self.parseBindings(vm, target.attr('data-splash'))
        };
      });
      return bindings.each(function() {
        var key, value, _ref, _results;
        _ref = this.bindings;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(self.binders[key].init(this.target, {
            options: value
          }));
        }
        return _results;
      });
    };

    Splash.prototype.parseBindings = function(vm, binding) {
      var key, keys, value, values;
      keys = [];
      values = [];
      for (key in vm) {
        value = vm[key];
        keys.push(key);
        values.push(value);
      }
      return new Function(keys, 'return {' + binding + '};').apply(void 0, values);
    };

    return Splash;

  })();

  window.sx = new Splash;

  /*
  Binders
  */


  sx.binders.text = {
    init: function(element, o) {
      var target;
      target = $(element);
      return o.options.subscribe(function(x) {
        return target.text(x);
      });
    }
  };

  sx.binders.value = {
    init: function(element, o) {
      var target;
      target = $(element);
      return o.options.subscribe(function(x) {
        return target.val(x);
      });
    }
  };

  sx.binders.css = {
    init: function(element, o) {
      var css, source, target, _ref, _results;
      target = $(element);
      _ref = o.options;
      _results = [];
      for (css in _ref) {
        source = _ref[css];
        _results.push(source.subscribe(function(x) {
          return target.toggleClass(css, x);
        }));
      }
      return _results;
    }
  };

}).call(this);
