// Generated by CoffeeScript 1.4.0

/*
Splash
*/


(function() {
  var Splash, sx;

  Splash = (function() {
    var parseBindings;

    function Splash() {
      this.binders = {};
    }

    Splash.prototype.bind = function(vm, dom, rootVm) {
      if (rootVm == null) {
        rootVm = vm;
      }
      dom = dom ? $(dom) : $(window.document.body);
      return this.bindElement({
        vm: vm,
        dom: dom,
        rootVm: rootVm,
        vmChanged: true
      });
    };

    Splash.prototype.bindElement = function(o) {
      var bindings, self;
      self = this;
      bindings = parseBindings(o);
      if (bindings) {
        this.applyBindings(o, bindings);
      }
      return o.dom.children().each(function() {
        return self.bindElement({
          vm: o.vm,
          dom: $(this),
          vmChanged: false
        });
      });
    };

    Splash.prototype.applyBindings = function(o, bindings) {
      var binder, options, _results;
      _results = [];
      for (binder in bindings) {
        options = bindings[binder];
        _results.push(this.binders[binder].init(o, options));
      }
      return _results;
    };

    parseBindings = function(o) {
      var binding, key, keys, value, values, _ref;
      binding = o.dom.attr('data-splash');
      if (!binding) {
        return null;
      }
      keys = [];
      values = [];
      _ref = o.vm;
      for (key in _ref) {
        value = _ref[key];
        keys.push(key);
        values.push(value);
      }
      return new Function(keys, "return { " + binding + " };").apply(null, values);
    };

    return Splash;

  })();

  sx = window.sx = new Splash;

  sx.binders.text = {
    init: function(o, options) {
      return options.subscribe(function(x) {
        return o.dom.text(x);
      });
    }
  };

  sx.binders.html = {
    init: function(o, options) {
      return options.subscribe(function(x) {
        return o.dom.html(x);
      });
    }
  };

  sx.binders.click = {
    init: function(o, options) {
      return o.dom.onAsObservable('click').subscribe(function(e) {
        e.preventDefault();
        return options.call(void 0, o.vm, e);
      });
    }
  };

  sx.binders.css = {
    init: function(o, options) {
      var css, disposable, source, target;
      target = o.dom;
      disposable = new Rx.CompositeDisposable;
      for (css in options) {
        source = options[css];
        disposable.add(source.subscribe(function(x) {
          console.log(x);
          return target.toggleClass(css, x);
        }));
      }
      return disposable;
    }
  };

  sx.binders.value = {
    init: function(o, options) {
      var blur, focus, get, set, source, target;
      target = o.dom;
      source = options;
      focus = target.onAsObservable('focus');
      blur = target.onAsObservable('blur');
      set = source.takeUntil(focus).concat(blur.take(1)).repeat().subscribe(function(x) {
        return target.val(x);
      });
      get = target.onAsObservable('change').subscribe(function(x) {
        return source.onNext(target.val());
      });
      return new Rx.CompositeDisposable(get, set);
    }
  };

  sx.binders.foreach = {
    init: function(o, options) {
      var template;
      template = o.dom.html();
      o.dom.empty();
      return options.delay(0).subscribe(function(lifetime) {
        var dom, vm;
        dom = $(template).appendTo(o.dom);
        vm = {
          $parent: o.vm,
          $root: o.rootVm,
          $data: lifetime.value
        };
        sx.bind(vm, dom, o.rootVm);
        return lifetime.subscribe(function() {}, function() {
          return dom.remove();
        }, function() {
          return dom.remove();
        });
      });
    }
  };

}).call(this);
