// Generated by CoffeeScript 1.4.0

/*
Observable Array
*/


(function() {
  var ObservableArray, Splash, sx,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ObservableArray = ObservableArray = (function(_super) {

    __extends(ObservableArray, _super);

    function ObservableArray(items) {
      var item, _i, _len;
      if (items == null) {
        items = [];
      }
      ObservableArray.__super__.constructor.apply(this, arguments);
      this.values = [];
      this.lifetimes = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        this.push(item);
      }
    }

    ObservableArray.prototype.push = function(value) {
      var lifetime;
      this.values.push(value);
      this.lifetimes.push(lifetime = new Rx.BehaviorSubject(value));
      this.onNext(lifetime);
      return value;
    };

    ObservableArray.prototype.remove = function(value) {
      var index;
      index = this.values.indexOf(value);
      if (index === -1) {
        console.log(index);
      }
      return this.splice(index, 1);
    };

    ObservableArray.prototype.splice = function() {
      var lifetime, removed, _i, _len, _results;
      Array.prototype.splice.apply(this.values, arguments);
      removed = Array.prototype.splice.apply(this.lifetimes, arguments);
      _results = [];
      for (_i = 0, _len = removed.length; _i < _len; _i++) {
        lifetime = removed[_i];
        _results.push(lifetime.onCompleted());
      }
      return _results;
    };

    ObservableArray.prototype.subscribe = function(observerOrOnNext) {
      var lifetime, subscription, _i, _len, _ref;
      subscription = ObservableArray.__super__.subscribe.apply(this, arguments);
      this.purge();
      observerOrOnNext = arguments.length > 1 || typeof observerOrOnNext === 'function' ? observerOrOnNext : observerOrOnNext.onNext;
      _ref = this.lifetimes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lifetime = _ref[_i];
        observerOrOnNext(lifetime);
      }
      return subscription;
    };

    ObservableArray.prototype.purge = function() {
      var lifetime, _i, _len, _ref, _results;
      _ref = this.lifetimes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lifetime = _ref[_i];
        if (lifetime.isCompleted) {
          _results.push(this.remove(lifetime));
        }
      }
      return _results;
    };

    ObservableArray.prototype.dispose = function() {
      var lifetime, _i, _len, _ref, _results;
      _ref = this.lifetimes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        lifetime = _ref[_i];
        _results.push(lifetime.onCompleted());
      }
      return _results;
    };

    return ObservableArray;

  })(Rx.Subject);

  /*
  Splash
  */


  Splash = (function() {
    var parseBindings;

    function Splash() {
      this.binders = {};
    }

    Splash.prototype.bind = function(vm, dom, rootVm) {
      if (rootVm == null) {
        rootVm = vm;
      }
      dom = dom ? $(dom) : $(window.document.body);
      return this.bindElement({
        vm: vm,
        dom: dom,
        rootVm: rootVm,
        vmChanged: true
      });
    };

    Splash.prototype.bindElement = function(o) {
      var bindings, self;
      self = this;
      bindings = parseBindings(o);
      if (bindings) {
        this.applyBindings(o, bindings);
      }
      return o.dom.children().each(function() {
        return self.bindElement({
          vm: o.vm,
          dom: $(this),
          vmChanged: false
        });
      });
    };

    Splash.prototype.applyBindings = function(o, bindings) {
      var binder, options, _results;
      _results = [];
      for (binder in bindings) {
        options = bindings[binder];
        _results.push(this.binders[binder].init(o, options));
      }
      return _results;
    };

    parseBindings = function(o) {
      var binding, key, keys, value, values, _ref;
      binding = o.dom.attr('data-splash');
      if (!binding) {
        return null;
      }
      keys = [];
      values = [];
      _ref = o.vm;
      for (key in _ref) {
        value = _ref[key];
        keys.push(key);
        values.push(value);
      }
      return new Function(keys, "return { " + binding + " };").apply(null, values);
    };

    return Splash;

  })();

  sx = window.sx = new Splash;

  sx.utils = {
    wrap: function(obsOrValue) {
      if (obsOrValue.subscribe) {
        return obsOrValue;
      } else {
        return new Rx.BehaviorSubject(obsOrValue);
      }
    }
  };

  sx.computed = function(options) {
    var key, keys, source, value, values, _ref;
    keys = [];
    values = [];
    _ref = options.params;
    for (key in _ref) {
      value = _ref[key];
      keys.push(key);
      values.push(sx.utils.wrap(value));
    }
    source = Rx.Observable.combineLatest(values, function() {
      return arguments;
    }).select(function(values) {
      var i, params, _i, _len;
      params = {};
      for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
        key = keys[i];
        params[key] = values[i];
      }
      return params;
    });
    return Rx.Observable.create(function(o) {
      return source.select(options.read).subscribe(o);
    });
  };

  sx.binders.text = {
    init: function(o, options) {
      return sx.utils.wrap(options).subscribe(function(x) {
        return o.dom.text(x);
      });
    }
  };

  sx.binders.html = {
    init: function(o, options) {
      return sx.utils.wrap(options).subscribe(function(x) {
        return o.dom.html(x);
      });
    }
  };

  sx.binders.click = {
    init: function(o, options) {
      return o.dom.onAsObservable('click').subscribe(function(e) {
        e.preventDefault();
        return options.call(void 0, o.vm, e);
      });
    }
  };

  sx.binders.css = {
    init: function(o, options) {
      var css, disposable, source, target;
      target = o.dom;
      disposable = new Rx.CompositeDisposable;
      for (css in options) {
        source = options[css];
        disposable.add(source.subscribe(function(x) {
          return target.toggleClass(css, x);
        }));
      }
      return disposable;
    }
  };

  sx.binders.value = {
    init: function(o, options) {
      var blur, focus, get, set, source, target;
      target = o.dom;
      source = sx.utils.wrap(options);
      focus = target.onAsObservable('focus');
      blur = target.onAsObservable('blur');
      set = source.takeUntil(focus).concat(blur.take(1)).repeat().subscribe(function(x) {
        return target.val(x);
      });
      get = target.onAsObservable('change').subscribe(function(x) {
        return source.onNext(target.val());
      });
      return new Rx.CompositeDisposable(get, set);
    }
  };

  sx.binders.foreach = {
    init: function(o, options) {
      var template;
      template = o.dom.html().trim();
      o.dom.empty();
      return sx.utils.wrap(options).delay(0).subscribe(function(lifetime) {
        var dom, vm;
        dom = $(template).appendTo(o.dom);
        vm = {
          $parent: o.vm,
          $root: o.rootVm,
          $data: lifetime.value
        };
        sx.bind(vm, dom, o.rootVm);
        return lifetime.subscribe(function() {}, function() {
          return dom.remove();
        }, function() {
          return dom.remove();
        });
      });
    }
  };

}).call(this);
